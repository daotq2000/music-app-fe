{"ast":null,"code":"import{call,put}from\"redux-saga/effects\";import{getSongById,getTop15BestSong,paginationSongs,saveSong,deleteListSong,updateTotalListen}from'../api/songAPI';import{getBestSongSuccess,getSongByIdFailed,getSongByIdSuccess,paginationSongFailed,paginationSongSuccessfully,saveSongSuccessFully,saveSongFailed,deleteListSongFailed,deleteListSongSuccessFully}from\"../redux/songReducer\";export function paginationSongSaga(_ref){let{payload}=_ref;return function*(){try{const res=yield call(paginationSongs,payload);yield put(paginationSongSuccessfully(res.data));}catch(e){yield put(paginationSongFailed(e));}}();}export function getBestSongSaga(_ref2){let{payload}=_ref2;return function*(){try{let res=yield call(getTop15BestSong);yield put(getBestSongSuccess(res.data));}catch(error){}}();}export function getSongByIdSaga(_ref3){let{payload}=_ref3;return function*(){try{const res=yield call(getSongById,payload);yield put(getSongByIdSuccess(res.data));}catch(error){yield put(getSongByIdFailed(error.errors));}}();}export function saveSongSaga(_ref4){let{payload}=_ref4;return function*(){try{const res=yield call(saveSong,payload);yield put(saveSongSuccessFully(res.data));}catch(error){yield put(saveSongFailed(error));}}();}export function deleteListSongSaga(_ref5){let{payload}=_ref5;return function*(){try{const res=yield call(deleteListSong,payload);yield put(deleteListSongSuccessFully(res.data));}catch(e){yield put(deleteListSongFailed(e));}}();}export function updateTotalListenSaga(_ref6){let{payload}=_ref6;return function*(){try{const res=yield call(updateTotalListen,payload);}catch(error){}}();}","map":{"version":3,"names":["call","put","getSongById","getTop15BestSong","paginationSongs","saveSong","deleteListSong","updateTotalListen","getBestSongSuccess","getSongByIdFailed","getSongByIdSuccess","paginationSongFailed","paginationSongSuccessfully","saveSongSuccessFully","saveSongFailed","deleteListSongFailed","deleteListSongSuccessFully","paginationSongSaga","_ref","payload","res","data","e","getBestSongSaga","_ref2","error","getSongByIdSaga","_ref3","errors","saveSongSaga","_ref4","deleteListSongSaga","_ref5","updateTotalListenSaga","_ref6"],"sources":["/home/luongtx/Workspace/personal/music-app-fe/src/saga/song.js"],"sourcesContent":["import { call, put } from \"redux-saga/effects\";\nimport { getSongById, getTop15BestSong, paginationSongs,saveSong,deleteListSong,updateTotalListen } \n        from '../api/songAPI'\nimport { getBestSongSuccess, getSongByIdFailed,getSongByIdSuccess,\n        paginationSongFailed, paginationSongSuccessfully, \n        saveSongSuccessFully,saveSongFailed,\n        deleteListSongFailed,deleteListSongSuccessFully} from \"../redux/songReducer\";\nexport function* paginationSongSaga({ payload }) {\n    try {\n        const res = yield call(paginationSongs, payload);\n        yield put(paginationSongSuccessfully(res.data))\n    } catch (e) {\n        yield put(paginationSongFailed(e));\n    }\n}\nexport function* getBestSongSaga({ payload }) {\n    try {\n        let res = yield call(getTop15BestSong);\n        yield put(getBestSongSuccess(res.data))\n    } catch (error) {\n    }\n}\nexport function* getSongByIdSaga({ payload }) {\n    try {\n        const res = yield call(getSongById, payload);\n        yield put(getSongByIdSuccess(res.data));\n    } catch (error) {\n        yield put(getSongByIdFailed(error.errors));\n    }\n}\nexport function* saveSongSaga({ payload }) {\n    try {\n        const res = yield call(saveSong, payload);\n        yield put(saveSongSuccessFully(res.data));\n    }catch(error) {\n        yield put(saveSongFailed(error));\n\n    }\n}\nexport function* deleteListSongSaga({payload}){\n    try{\n        const res = yield call(deleteListSong, payload);\n        yield put(deleteListSongSuccessFully(res.data));\n    }catch(e){\n        yield put(deleteListSongFailed(e));\n    }\n}\nexport function* updateTotalListenSaga({payload}){\n    try {\n        const res = yield call(updateTotalListen, payload);\n    } catch (error) {\n        \n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}